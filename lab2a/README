# NAME: Qinglin Zhang
# EMAIL: qqinglin0327@gmail.com
# ID:205356739

lab2_add.c:The c source file doing the addition and subtraction with threads.takes --iterations=iteration --threads=threadNum --yield --sync=option options

lab2_add.csv: The file records different output with different number of iterators and threads
lab2_add-1.png:threads and iterations that run without failure(w and w/o yields)
lab2_add-2.png: average time per operation with and w/o yields
lab2_add-3.png: graph that shows per operation cost vs. the number of iterations
lab2_add-4.png:graph that plotted threads and Iterations that run without failure
lab2_add-5.png:per opration cost vs number of threads with different locks
SortedList.c/h: the file difines the double linked list
lab2_list.c: the c source file that runs the double linked list using threads and diffrent type of locks. It inserts, check the length, look for the key, and delete the key.
lab2_list.csv: output for the lab2_list.
lab2_list-1.png: graph shows that cost per operation vs iteration 
lab2_list-2.png: shows the unprotected threads and iteration without failure
lab2_list-3.pngshows the protected threads and iteration without failure
lab2_list-4.png: shows the cost per operation for mutex and spin in list.
Makefile: compile the c source files, clean the temprory files, and tar.

Question 2.1.1 - causing conflicts
	 The race condiotion is less likely to happen with less iteration since it takes 
	 a shoreter time to finsih the task. If it is short enogh, the cpu can finish 
	 quickly before the next process coming up.  If one task is long enough, 
	 it may causes some overlaps with other threads. Thus smaller number of iterations so seldom fail.

Question 2.1.2
	 Yiled runs slower since it costs significant time to interrpt the ongoing threads and switch to a new thread by calling the system call. 
	 So most of them was wasted from the swiching.
	 It is not possible to get valid per-operation timings since multiple threads and yields are going on. The time becopmes unpredicable.
QUESTION 2.1.3 - measurement errors
	 The resource is limited. As a result of increasing number of iterations, much more time is used to do the calculation instead of creating new processes.
	 The time was used to create new threads are now used to run more iterations, so the average cost per operation gets lower as we divide the number of process.
	 To get the correct cost, we need to run a very high number of iterators, which makes the resource that threads takes becomes as less as possible 

QUESTION 2.1.4 - costs of serialization:
	 Lower number of threads means lower chance the conflicts are likely to happen. The locks are not used much, so there woldn't be many difference.
	 Higher number of threas means higher chance the conflicts are likely to happen. There can be numerous threads sharing the one source, so it means more ofeten the threads
	 need to wait for the unlock.

QUESTION 2.2.1 - scalability of Mutex
	 The curve in List-4 is more like a line with a constant slope.
	 On the other hand, the curve in Add 5 is like a Exponential function. As the number of threads increase, the 
	 slower the cost per operations grows. Also CAS is going to catch up the mutex CPO at arount 16 threads.
	 Apeearently, the curve in List-4 grows much faster than Add-5, since one is doing the linked list which requires more modifition compare to the simple addition.
	 	 
	
QUESTION 2.2.2 - scalability of spin locks
	 Both operations performed similarly for the low number of threads. And spin is doing the best job. However, it gets very high cost with high number of threads. The slope for spin lock increases ad the number of threads grows. Since spin-lock has to wait until the other processes to finish, it becomes very insufficient with a high number of threads. 



Reference:

https://stackoverflow.com/questions/3477292/what-do-and-do-as-prefixes-to-recipe-lines-in-make using - on the makefile in order to let the makefile keep going

https://piazza.com/class/kbpjf32wbol4kc?cid=191 

https://stackoverflow.com/questions/822323/how-to-generate-a-random-int-in-c#:~:text=The%20rand()%20function%20in,seed)%20to%20set%20a%20seed. srand()

